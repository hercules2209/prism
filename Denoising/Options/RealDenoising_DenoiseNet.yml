# DenoiseNet Training Configuration

# general settings
name: RealDenoising_DenoiseNet
model_type: ImageCleanModel
scale: 1
num_gpu: 0
manual_seed: 100
is_train: true

# dataset and data loader settings
datasets:
  train:
    name: TrainSet
    type: Dataset_PairedImage
    dataroot_gt: ./Denoising/Datasets/train/SIDD/target_crops
    dataroot_lq: ./Denoising/Datasets/train/SIDD/input_crops
    geometric_augs: true
    filename_tmpl: '{}'
    io_backend:
      type: disk

    # Progressive training settings
    use_shuffle: true
    num_worker_per_gpu: 8
    batch_size_per_gpu: 8
    mini_batch_sizes: [8,5,4,2]              # Reduced stages for 100k iterations
    iters: [40000,30000,20000,10000]         # Total 100k iterations
    gt_size: 384   # Max patch size
    gt_sizes: [128,192,256,384]              # Progressive patch sizes
    dataset_enlarge_ratio: 1
    prefetch_mode: ~

  val:
    name: ValSet
    type: Dataset_PairedImage
    dataroot_gt: ./Denoising/Datasets/val/SIDD/target_crops
    dataroot_lq: ./Denoising/Datasets/val/SIDD/input_crops
    io_backend:
      type: disk

# network structures
network_g:
  type: DenoiseNet
  channels: [64, 128, 256, 512]  # Channel configuration for 4 encoder/decoder blocks

# path
path:
  pretrain_network_g: ~
  strict_load_g: true
  resume_state: ~
  experiments_root: experiments/RealDenoising_DenoiseNet  
  models: experiments/RealDenoising_DenoiseNet/models     
  training_states: experiments/RealDenoising_DenoiseNet/training_states 
  log: experiments/RealDenoising_DenoiseNet/logs         
  visualization: experiments/RealDenoising_DenoiseNet/visualization  

# training settings
train:
  total_iter: 100000
  warmup_iter: -1  # no warm up
  use_grad_clip: true

  # Cosine annealing scheduler
  scheduler:
    type: CosineAnnealingRestartCyclicLR
    periods: [40000, 60000]           # Two cycles for 100k iterations
    restart_weights: [1,1]
    eta_mins: [0.0003,0.000001]       # Same LR range as Restormer
  
  mixing_augs:
    mixup: true
    mixup_beta: 1.2
    use_identity: true

  optim_g:
    type: AdamW
    lr: !!float 3e-4
    weight_decay: !!float 1e-4
    betas: [0.9, 0.999]
  
  # losses
  pixel_opt:
    type: PSNRLoss
    loss_weight: 1
    reduction: mean
    toY: false  # Calculate PSNR on RGB channels

# validation settings
val:
  window_size: 8
  val_freq: !!float 4e3
  save_img: false
  rgb2bgr: true    
  use_image: false  
  metrics:
    psnr:
      type: calculate_psnr
      crop_border: 0
      test_y_channel: false

# logging settings
logger:
  print_freq: 100
  save_checkpoint_freq: !!float 4e3
  use_tb_logger: true
  wandb:           
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500
